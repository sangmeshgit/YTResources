

#############
Lab  : CodePipeline with CodeCommit
Your pipeline is triggered when you push a change to the CodeCommit repository. The pipeline deploys your changes to an Amazon EC2 instance using CodeDeploy as the deployment service.
#############

######################
Lab Title: 2-stage pipeline with CodeCommit as code source 
######################

Task 1: Create a CodeCommit repository
=====================
01. Open the CodeCommit console at https://console.aws.amazon.com/codecommit/.

02. In the Region selector, choose the AWS Region where you want to create the repository and 
    pipeline. Ex: us-east-1.

03. On the Repositories page, choose Create repository.

04. On the Create repository page, in Repository name, enter a name for your repository 
    (for example, MyDemoRepo).

05. Choose Create.


Task 2: Setup Local repository
=====================
01. Goto Cloud9, create a Cloud9 environment. Use amazon Linux platform.This will take 2 minutes. 

02. With your new repository open in the console, choose Clone URL on the top right of the page, 
    and then choose Clone HTTPS. The address to clone your Git repository is copied to your clipboard.

03. In Cloud9 IDE, Run the following command to clone the repository, replacing the address 
    with the one you copied in the previous step. This command creates a directory called MyDemoRepo. 
    You copy a sample application to this directory.
git clone https://git-codecommit.us-east-1.amazonaws.com/v1/repos/MyDemoRepo


Task 3: Add sample code to your CodeCommit repository
==============================
01. Create a cloud9 environment

02. If you want to deploy to Amazon Linux instances using CodeDeploy, download the sample 
      application here: SampleApp_Linux.zip. cd /home/ubuntu/environment
wget https://docs.aws.amazon.com/codepipeline/latest/userguide/samples/SampleApp_Linux.zip

# list the files
ls
MyDemoRepo  SampleApp_Linux.zip

03. Unzip the files from SampleApp_Linux.zip into the local directory you created earlier 
       (for example, /tmp/MyDemoRepo or c:\temp\MyDemoRepo).

      Be sure to place the files directly into your local repository. Do not include a SampleApp_Linux folder. 
     On your local Linux, macOS, or Unix machine, for example, your directory and file hierarchy should look like this:
unzip SampleApp_Linux.zip -d MyDemoRepo


04. In your homedir, the file structure now is:

/home/ubuntu/environment
   └-- MyDemoRepo
       │-- appspec.yml
       │-- index.html
       │-- LICENSE.txt
       └-- scripts
           │-- install_dependencies
           │-- start_server
           └-- stop_server


05. Upload code to CodeCommit repo

cd /home/ubuntu/environment/MyDemoRepo
git add -A
git status

git commit -m "Add sample application files"

git push

04. The files you downloaded and added to your local repo have now been added to the main branch 
    in your CodeCommit MyDemoRepo repository and are ready to be included in a pipeline.



Task 4: Create an Amazon EC2 Linux instance and install the CodeDeploy agent
============================================

01. Create an IAM role 'EC2RoleforCodeDeploy' for The EC2 instance so that CodeDeploy-agent can run 
   on it. Add policy 'AmazonEC2RoleforAWSCodeDeploy' to that role. Add policy       'AmazonSSMManagedInstanceCore'so that it can be managed by SSM.

02. Launch an amazon linux2 EC2 with port numbers 22 and 80 open. Use the above instance profile 
   (EC2RoleforCodeDeploy).  Tag name=CodePipelineDemo. This is the EC2 onto which we will deploy 
   the code. 

03. Login to the machine from command prompt
sudo hostnamectl set-hostname TestCodeCommit


Task 5: Create an application in CodeDeploy
==================================
First, you create a role that allows CodeDeploy to perform deployments. Then, you create a 
CodeDeploy application.

01. Go to IAM. Choose Roles. Create Role.

02. Under Select trusted entity, choose AWS service. Under Use case, choose CodeDeploy. Choose     CodeDeploy from the options listed. Choose Next. The AWSCodeDeployRole managed policy is 
    already attached to the role.

03. Choose Next. Enter a name for the role (for example, CodeDeployServiceRole), 
    and then choose Create role.

04. Goto CodeDeploy.  Choose Create application.

05. For Application name, enter 'MyDemoApp'. Choose 'EC2/On-premises' for compute platform.
    Choose Create application.

06. From within the application, Create deployment group. Name: DepGrp. Select the service role 
    we created above. Deployment type: In place. 

07. Environment configuration: Amazon EC2 instance. Tag Key: Name; Value: CodePipelineDemo 

08. Under Agent configuration with AWS Systems Manager, choose 'Now and schedule updates'. This 
    installs the agent on the instance. 

09. Under Load Balancer, unselect 'Enable load balancing'.  Choose 'Create Deployment group'


Task 6: Create the Pipeline
=======================

01. Goto CodePipeline. Choose Create pipeline. Name: MyFirstPipelne. Pipelne type: choose default V2.

02. Choose 'New service role'.Leave the role name as it is given. Select 'Allow AWS CodePipeline to
    create a service role so it can be used with this new pipeline'. Choose Next

03. In Source provider, choose CodeCommit. In Repository name, choose the name of the CodeCommit         repository you created (MyDemoRepo). Branch name : master.

04. Under Change detection options, leave the defaults. This allows CodePipeline to use Amazon     CloudWatch Events to detect changes in your source repository. Choose Next

05. In Build stage, choose Skip build stage, and then accept the warning message by choosing Skip     again. Choose Next.

06. In deploy stage, in Deploy provider, choose 'AWS CodeDeploy'. In Application name, choose     
    your app name.(Ex: MyDemoApp). In Deployment group, choose your deployment group. Choose Next.

07. Review the information, and then choose Create pipeline.

08. Observe the progress of the pipeline execution


Task 7: Verify the Results
=======================
01. After pipeline execution completes successfully, goto 'Deployments'. Click on Deployment id.
    Click on instance id. 

02. Get the Public DNS of the instance, copy the address 
    (ex:ec2-192-0-2-1.us-west-2.compute.amazonaws.com), and then paste it into the address bar 
    of your web browser. The web page shows 'Congratulations' message against blue background.


Task 8: Modify the Code in CodeCommit and see automatic build & deploy
==================================
01. Your pipeline is configured to run whenever code changes are made to your CodeCommit 
    repository.

02. Goto cloud9.  
    cd /home/ubuntu/environment/MyDemoRepo
    edit index.html. Make changes to color, background-color and the messages in this html page.

    body {
      color: #000000;  
      background-color: #CCFFCC;
      font-family: Arial, sans-serif;
      font-size: 14px;

    Change message from 'Congratulations' to 'Updated Sample Deployment'

    Or alternatively, you can replace the index.html with the below contents.

### start of code ###
<!DOCTYPE html>
<html>
<head>
  <title>Updated Sample Deployment</title>
  <style>
    body {
      color: #000000;
      background-color: #CCFFCC;
      font-family: Arial, sans-serif;  
      font-size:14px;
    }
        
    h1 {
      font-size: 250%;
      font-weight: normal;
      margin-bottom: 0;
    }
    
    h2 {
      font-size: 175%;
      font-weight: normal;
      margin-bottom: 0;
    }
  </style>
</head>
<body>
  <div align="center"><h1>Updated Sample Deployment</h1></div>
  <div align="center"><h2>This application was updated using CodePipeline, CodeCommit, and CodeDeploy.</h2></div>
  <div align="center">
    <p>Learn more:</p> 
    <p><a href="https://docs.aws.amazon.com/codepipeline/latest/userguide/">CodePipeline User Guide</a></p>
    <p><a href="https://docs.aws.amazon.com/codecommit/latest/userguide/">CodeCommit User Guide</a></p>
    <p><a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/">CodeDeploy User Guide</a></p>
  </div>
</body>
</html>

###end of code ####


    Save & quit with 'Esc :wq!'

03. Commit the changes and push it to CodeCommit. 

    git commit -am "Updated sample application files"
    git push

04. Goto CodePipeline and ensure it is running. Once it is complete, go to your EC2 webpage
    and refresh and see the new page.


Task 9: Cleanup
==============
After you are done with the lab, you may delete the EC2, Cloud9, CodePipeline resources and 
CodeDeploy resources.


###########################################
               E    N    D
###########################################





