
####################
CodePipeline as Code: 
Download the definitions file of a code pipeline and use it to recreate the same pipeline
####################

Task 1- 5 sets up the initial CodePipeline.
Task 6 - downloads the config file and create new code pipeline using that


Task 1: Launch Ubuntu EC2
======================
1. Create an IAM role 'RoleGivenToEC2ToUseCodeDeploy'. Attach policy AmazonEC2RoleforAWSCodeDeploy
   to this role.

2. Launch an Ubuntu 22.04 machine. Use the above instance profile / IAM role. 
   Open ports 22 and 80. Give the tagname as 'CodeDeploy-date' ex: 'CodeDeploy-June26'
   This is the same EC2 onto which we will deploy the code. 

3. Configure the EC2.
sudo hostnamectl set-hostname CodeDeploy

sudo apt update
sudo apt install wget unzip awscli -y

aws configure
enter AKID
enter SAKID
region: us-east-1

smoke test: 
aws s3 ls


Task 2: Deploy CodeDeploy agent
=========================

4. Create script to install code deploy agent
vi codedeploy-agent.sh
# type the below into the script

sudo apt-get update
sudo apt-get install ruby -y

cd /home/ubuntu
wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install

chmod +x ./install

# Install codedeploy
sudo ./install auto

# Check the status of codedeploy
sudo service codedeploy-agent status

Save & quit

5. Run the script
chmod +x ./codedeploy-agent.sh
sudo ./codedeploy-agent.sh auto


# Use below commands if needed
# sudo service codedeploy-agent stop
# sudo service codedeploy-agent start


Task 3: Set up your Github repository. 
-------------------------------
6. You can fork the below repository into your account. 
   https://github.com/unuste37/YT-CodeDeploy
This includes the web index file which we will deploy to our EC2.


Task 4: In Code Deploy create an application and deployment group
--------------------------
07. Create a CodeDeployService role with name 'RoleGivenToCodeDeployService' and Attach Policy 'AWSCodeDeployRole'.
    This role will be given to CodeDeploy when you create the service. It enables 'CodeDeploy' tpo access the 
    required resources. 

08. Go to CodeDeploy in Console. Create application. Select Compute Platform as EC2/OnPremise

09. Create Deployment Group. Give any easily identifiable name. Use the role created in previous step.

10. Select Deployment Type 'in-place. Select Env configuration: Amazon EC2 instances.
    Enter Name tag of the EC2 instance which we will upgrade using CodeDeploy/Pipeline. 

11. Deployment Settings: Select CodeDeployDefault.AllAtOnce.  Uncheck 'Enable Load Balancing'.

12. Leave other fileds as default and create Deployment group


Task 5: Set up the pipeline and execute it manually
---------------------------------------------------
1. Goto code pipeline and create a new code pipeline. 'Create Pipeline'.
   Pipeline name : 'pipeline-yourname' ex: pipeline-unus
   Pipeline type : V2

2. Service Role: 'New service role'. Leave everything else as default. Click 'Next'

3. In 'source provider', choose 'GitHub version2'

4. Click on Connect to GitHub (or choose an existing connection)

5. Choose the repository name.

6. Pipeline trigger: 'Push in a branch'.  This will ensure that any new commit in the
   Github repository will trigger the pipeline.

7. Enter branch name (ex: master)

8. Leave everything else 'default' and click on Next

9. Skip build stage

10. Select AWS CodeDeploy as Deploy provider. Select the application name and deployment group created earlier

11. Click 'Next'. Click 'Create Pipeline'

12. Observe the progress of the code pipeline stages.

13. Once the pipeline is sucessfully completed, goto EC2 dashboard, copy the public DNS of the 
    target EC2 and paste that into browser address bar. Observe the resulting web page.



Task 6: Download CodePipeline config
===============
1. Download codepipeline config
aws codepipeline get-pipeline --name <pipeline-name> --query 'pipeline' --output json > pipeline-definition.json
Ex:
aws codepipeline get-pipeline --name new-pipe --query 'pipeline' --output json > pipeline-definition.json

2. Edit the config file to change pipeline name

3. Create a new pipeline using the config file.
aws codepipeline create-pipeline --pipeline file://pipeline-definition.json

4. Once the new pipeline execution is done, ensure that the web app is deployed in EC2


Task 7: CleanUp 
===============
01. Terminate EC2
02. Terminate CodePipeline, CodeDeploy application


